AWSTemplateFormatVersion: 2010-09-09
Description: Hybrid VPC Template for Multi AZ Environment
Parameters:
  ChildAccName:
    Type: String
    Description: Name of the account in which this VPC is being created
    Default: hyphen-k8s-cluster-exercise
  VPCCidrBlock:
    Type: String
    Description: CIDR block for VPC to deploy. (X.X.X.X/X)
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/21)$
    Default: 10.235.48.0/21
  PublicSubnetCIDR1:
    Type: String
    Description: Public Subnet CIDR to deploy in to Availability Zone One
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/24)$
    Default: 10.235.48.0/24
  PublicSubnetCIDR2:
    Type: String
    Description: Public Subnet CIDR to deploy in to Availability Zone Two
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/24)$
    Default: 10.235.51.0/24
  PublicSubnetCIDR3:
    Type: String
    Description: Public Subnet CIDR to deploy in to Availability Zone Three
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/24)$
    Default: 10.235.54.0/24
  PrivateSubnetCIDR1:
    Type: String
    Description: Private Subnet CIDR to deploy in to Availability Zone One
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/24)$
    Default: 10.235.49.0/24
  PrivateSubnetCIDR2:
    Type: String
    Description: Private Subnet CIDR to deploy in to Availability Zone Two
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/24)$
    Default: 10.235.52.0/24
  PrivateSubnetCIDR3:
    Type: String
    Description: Private Subnet CIDR to deploy in to Availability Zone Three
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/24)$
    Default: 10.235.55.0/24
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - ChildAccName
          - VPCCidrBlock
          - PublicSubnetCIDR1
          - PublicSubnetCIDR2
          - PrivateSubnetCIDR1
          - PrivateSubnetCIDR2
          - PublicSubnetCIDR3
          - PrivateSubnetCIDR3
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub 'vpc-${AWS::Region}-${ChildAccName}'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 
            - 'igw-${VpcId}-${ChildAccName}'
            - VpcId: !Ref VPC
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PrivateSubnetCIDR1
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Sub 
            - 'private-subnet-az-1-${VpcId}'
            - VpcId: !Ref VPC
        - Key: kubernetes.io/role/internal-elb
          Value: 1
      VpcId: !Ref VPC


  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PrivateSubnetCIDR2
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Sub 
            - 'private-subnet-az-2-${VpcId}'
            - VpcId: !Ref VPC
        - Key: kubernetes.io/role/internal-elb
          Value: 1
      VpcId: !Ref VPC
  PrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PrivateSubnetCIDR3
      AvailabilityZone: !Select 
        - '2'
        - !GetAZs ''
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Sub 
            - 'private-subnet-az-3-${VpcId}'
            - VpcId: !Ref VPC
        - Key: kubernetes.io/role/internal-elb
          Value: 1
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PublicSubnetCIDR1
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Sub 
            - 'public-subnet-az-1-${VpcId}'
            - VpcId: !Ref VPC
        - Key: kubernetes.io/role/elb
          Value: 1
      VpcId: !Ref VPC
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PublicSubnetCIDR2
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Sub 
            - 'public-subnet-az-2-${VpcId}'
            - VpcId: !Ref VPC
        - Key: kubernetes.io/role/elb 
          Value: 1
      VpcId: !Ref VPC
  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PublicSubnetCIDR3
      AvailabilityZone: !Select 
        - '2'
        - !GetAZs ''
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Sub 
            - 'public-subnet-az-3-${VpcId}'
            - VpcId: !Ref VPC
        - Key: kubernetes.io/role/elb
          Value: 1
      VpcId: !Ref VPC
  SGXDhcpOptions: 
    Type: AWS::EC2::DHCPOptions
    Properties: 
        DomainName: ap-southeast-1.compute.internal
        DomainNameServers: 
          - AmazonProvidedDNS

  NatGatewayEIP1:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - NatGatewayEIP1
        - AllocationId
      SubnetId: !Ref PublicSubnet1
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 
            - 'public-route-table-${VpcId}'
            - VpcId: !Ref VPC
  AttachPublicSubnet1RouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  AttachPublicSubnet2RouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  AttachPublicSubnet3RouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
  PublicRoutetoInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
    DependsOn: InternetGatewayAttachment
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 
            - 'private-route-table-${VpcId}'
            - VpcId: !Ref VPC
  AttachPrivateSubnet1RouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  AttachPrivateSubnet2RouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  AttachPrivateSubnet3RouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3
  PrivateRoutetoNatGateway1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
      RouteTableId: !Ref PrivateRouteTable
Outputs:
  VPCID:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'
  VPCCidrBlock:
    Description: VPC Cidr Block
    Value: !Ref VPCCidrBlock
    Export:
      Name: !Sub '${AWS::StackName}-VPCCidrBlock'
  PublicRouteTable:
    Description: Public Route Table
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub '${AWS::StackName}-PublicRouteTable'
  PrivateRouteTable:
    Description: Private Route Table
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub '${AWS::StackName}-PrivateRouteTable'
  PublicSubnet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1'
  PublicSubnet2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2'
  PublicSubnet3:
    Description: Public Subnet 3
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet3'
  PrivateSubnet1:
    Description: Private Subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1'
  PrivateSubnet2:
    Description: Private Subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2'
  PrivateSubnet3:
    Description: Private Subnet 3
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet3'
  DefaultSecurityGroupId:
    Description: Default Security Group
    Value: !GetAtt 
      - VPC
      - DefaultSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-DefaultSecurityGroupId'